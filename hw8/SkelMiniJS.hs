module SkelMiniJS where

-- Haskell module generated by the BNF converter

import AbsMiniJS
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transSeq :: Seq -> Result
transSeq x = case x of
  Var id exp seq  -> failure x
  Sequence stat seq  -> failure x
  Seqstat stat  -> failure x


transStat :: Stat -> Result
transStat x = case x of
  ExpStat exp  -> failure x
  Return exp  -> failure x
  If exp stat0 stat  -> failure x
  While exp stat  -> failure x
  BlockStat seq  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  Assign exp0 exp  -> failure x
  Or exp0 exp  -> failure x
  And exp0 exp  -> failure x
  BinaryEQ exp0 exp  -> failure x
  BinaryNE exp0 exp  -> failure x
  BinaryLT exp0 exp  -> failure x
  BinaryLE exp0 exp  -> failure x
  BinaryGE exp0 exp  -> failure x
  BinaryGT exp0 exp  -> failure x
  BinaryAdd exp0 exp  -> failure x
  BinarySub exp0 exp  -> failure x
  BinaryMul exp0 exp  -> failure x
  BinaryDiv exp0 exp  -> failure x
  UnaryNot exp  -> failure x
  UnaryNeg exp  -> failure x
  Call exp exps  -> failure x
  Record exps  -> failure x
  Item id exp  -> failure x
  List exps  -> failure x
  Function ids seq  -> failure x
  String str  -> failure x
  Int n  -> failure x
  TrueLit  -> failure x
  FalseLit  -> failure x
  Null  -> failure x
  Undef  -> failure x
  Variable id  -> failure x
  This  -> failure x
  Field exp id  -> failure x
  Lookup exp0 exp  -> failure x



