module AbsMiniJS where

-- Haskell module generated by the BNF converter

newtype Ident = Ident String deriving (Eq,Ord,Show)
data Seq =
   Var Ident Exp Seq
 | Sequence Stat Seq
 | Seqstat Stat
  deriving (Eq,Ord,Show)

data Stat =
   ExpStat Exp
 | Return Exp
 | If Exp Stat Stat
 | While Exp Stat
 | BlockStat Seq
  deriving (Eq,Ord,Show)

data Exp =
   Assign Exp Exp
 | Or Exp Exp
 | And Exp Exp
 | BinaryEQ Exp Exp
 | BinaryNE Exp Exp
 | BinaryLT Exp Exp
 | BinaryLE Exp Exp
 | BinaryGE Exp Exp
 | BinaryGT Exp Exp
 | BinaryAdd Exp Exp
 | BinarySub Exp Exp
 | BinaryMul Exp Exp
 | BinaryDiv Exp Exp
 | UnaryNot Exp
 | UnaryNeg Exp
 | Call Exp [Exp]
 | Record [Exp]
 | Item Ident Exp
 | List [Exp]
 | Function [Ident] Seq
 | String String
 | Int Integer
 | TrueLit
 | FalseLit
 | Null
 | Undef
 | Variable Ident
 | This
 | Field Exp Ident
 | Lookup Exp Exp
  deriving (Eq,Ord,Show)

